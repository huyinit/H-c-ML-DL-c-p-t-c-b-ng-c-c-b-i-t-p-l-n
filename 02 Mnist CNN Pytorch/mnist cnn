{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mnist cnn","provenance":[],"authorship_tag":"ABX9TyMgm/k8ReSkj61NMvIkHiBx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Niey-1RV_G0V","executionInfo":{"status":"ok","timestamp":1625792426864,"user_tz":-420,"elapsed":23347,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"970b6501-1ca2-4c8b-91fa-4ab4b6133ae8"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3fETIrjFFgtm"},"source":["https://colab.research.google.com/github/pranjalchaubey/Deep-Learning-Notes/blob/master/PyTorch%20Image%20Classification%20in%202020/Image_Classification_practice.ipynb#scrollTo=y0MkS6OadYRQ\n"]},{"cell_type":"markdown","metadata":{"id":"ydNwvXqP_Z_l"},"source":["**1. import thư viện**"]},{"cell_type":"code","metadata":{"id":"ItX8pEaL_K8d","executionInfo":{"status":"ok","timestamp":1625793943765,"user_tz":-420,"elapsed":386,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}}},"source":["#pytorch utility imports\n","import torch  #Thêm thư viện pytorch bằng dòng code: import torch\n","import torchvision #Để sử dụng chuyên biệt cho đọc và xử lý ảnh trên pytorch\n","import torchvision.transforms as transforms #transforms là các chức năng biến đổi hình ảnh đơn giản có thể được thực hiện theo trình tự ngay sau khi dataset (hình ảnh) được tả\n","import torchvision.datasets as datasets #load dataset .. từ torchvision.dataset\n","from torch.utils.data import DataLoader, TensorDataset\n","#TensorDataset(): đây là Dataset wrapping tensors. Các sample(ảnh) được lấy dựa vào indexing tensors dọc theo chiều đầu tiên của tensor.\n","#DataLoader(): Nó giúp kết hợp dataset and sampler. Và nó cũng cung cấp đa xử lý vòng lặp qua bộ dataset.\n","from torchvision.utils import make_grid\n","\n","#neural net imports\n","import torch.nn as nn #Mô-đun nn trong PyTorch được sử dụng để 'xây dựng' mạng nơ-ron và chứa tất cả các lớp học sâu. \n","import torch.nn.functional as F ## giống nn, nhưng khác một chút\n","import torch.optim as optim #Gói tối ưu trong PyTorch chứa các thuật toán tối ưu hóa giúp để đào tạo mạng của bạn.\n","from torch.autograd import Variable\n","#import external libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","import os\n","import math\n"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eISWxAeC_gpE"},"source":["**2.Xử lý Dataset**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":252},"id":"wxjMI2aV_RKA","executionInfo":{"status":"ok","timestamp":1625793951614,"user_tz":-420,"elapsed":5513,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"7b71c1ad-9032-44c5-f106-3e2a08149fe4"},"source":["# Prepare Dataset # load data\n","train = pd.read_csv(r\"/content/drive/MyDrive/Bài tập AI/mnist/train.csv\",dtype = np.float32)\n","#để float vì để không phải convert sang outputs = model(train.float()) mà outputs = model(train)\n","train.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>pixel0</th>\n","      <th>pixel1</th>\n","      <th>pixel2</th>\n","      <th>pixel3</th>\n","      <th>pixel4</th>\n","      <th>pixel5</th>\n","      <th>pixel6</th>\n","      <th>pixel7</th>\n","      <th>pixel8</th>\n","      <th>pixel9</th>\n","      <th>pixel10</th>\n","      <th>pixel11</th>\n","      <th>pixel12</th>\n","      <th>pixel13</th>\n","      <th>pixel14</th>\n","      <th>pixel15</th>\n","      <th>pixel16</th>\n","      <th>pixel17</th>\n","      <th>pixel18</th>\n","      <th>pixel19</th>\n","      <th>pixel20</th>\n","      <th>pixel21</th>\n","      <th>pixel22</th>\n","      <th>pixel23</th>\n","      <th>pixel24</th>\n","      <th>pixel25</th>\n","      <th>pixel26</th>\n","      <th>pixel27</th>\n","      <th>pixel28</th>\n","      <th>pixel29</th>\n","      <th>pixel30</th>\n","      <th>pixel31</th>\n","      <th>pixel32</th>\n","      <th>pixel33</th>\n","      <th>pixel34</th>\n","      <th>pixel35</th>\n","      <th>pixel36</th>\n","      <th>pixel37</th>\n","      <th>pixel38</th>\n","      <th>...</th>\n","      <th>pixel744</th>\n","      <th>pixel745</th>\n","      <th>pixel746</th>\n","      <th>pixel747</th>\n","      <th>pixel748</th>\n","      <th>pixel749</th>\n","      <th>pixel750</th>\n","      <th>pixel751</th>\n","      <th>pixel752</th>\n","      <th>pixel753</th>\n","      <th>pixel754</th>\n","      <th>pixel755</th>\n","      <th>pixel756</th>\n","      <th>pixel757</th>\n","      <th>pixel758</th>\n","      <th>pixel759</th>\n","      <th>pixel760</th>\n","      <th>pixel761</th>\n","      <th>pixel762</th>\n","      <th>pixel763</th>\n","      <th>pixel764</th>\n","      <th>pixel765</th>\n","      <th>pixel766</th>\n","      <th>pixel767</th>\n","      <th>pixel768</th>\n","      <th>pixel769</th>\n","      <th>pixel770</th>\n","      <th>pixel771</th>\n","      <th>pixel772</th>\n","      <th>pixel773</th>\n","      <th>pixel774</th>\n","      <th>pixel775</th>\n","      <th>pixel776</th>\n","      <th>pixel777</th>\n","      <th>pixel778</th>\n","      <th>pixel779</th>\n","      <th>pixel780</th>\n","      <th>pixel781</th>\n","      <th>pixel782</th>\n","      <th>pixel783</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 785 columns</p>\n","</div>"],"text/plain":["   label  pixel0  pixel1  pixel2  ...  pixel780  pixel781  pixel782  pixel783\n","0    1.0     0.0     0.0     0.0  ...       0.0       0.0       0.0       0.0\n","1    0.0     0.0     0.0     0.0  ...       0.0       0.0       0.0       0.0\n","2    1.0     0.0     0.0     0.0  ...       0.0       0.0       0.0       0.0\n","3    4.0     0.0     0.0     0.0  ...       0.0       0.0       0.0       0.0\n","4    0.0     0.0     0.0     0.0  ...       0.0       0.0       0.0       0.0\n","\n","[5 rows x 785 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2lAXZ5HH_RNC","executionInfo":{"status":"ok","timestamp":1625793954762,"user_tz":-420,"elapsed":924,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"0d44d0bf-fe4e-49d9-b460-92058d5b3bda"},"source":["#quy định:feature_numpy: láy feature từ tập train ; features_xtrain :numpy ;featuresxtrain(tensor)\n","#chia các ảnh với kích thước 28 * 28 (features_numpy) và 10 labels từ 0 đến 9.(targets_numpy)\n","targets_numpy = train.label.values#.value :trả về một đối tượng dạng danh sách tất cả các giá trị trong một từ điển nhất định.\n","features_numpy = train.loc[:,train.columns != \"label\"].values/255 # chuẩn hóa data ; \n","#.loc[]: lấy nhãn chỉ mục và trả về hàng hoặc khung dữ liệu nếu nhãn chỉ mục tồn tại trong khung dữ liệu người gọi.\n","#print(features_numpy)\n","#Để chia dữ liệu train và test => hàm train_test_split trong sklearn.\n","#Ta sẽ chia kích thước của train data là 80% và của test data là 20%.\n","features_xtrain, features_xtest, y_train, y_test = train_test_split(features_numpy,\n","                                                                    targets_numpy,\n","                                                                    test_size = 0.2,\n","                                                                    random_state = 42) \n","#print(features_xtrain)\n","# tạo các  feature và  targets tensor cho train set.\n","featuresxtrain = torch.from_numpy(features_xtrain)\n","print(featuresxtrain.shape)\n","ytrain = torch.from_numpy(y_train).type(torch.LongTensor) # data type is long\n","print(ytrain.shape)\n","\n","featuresxtest = torch.from_numpy(features_xtest)\n","ytest = torch.from_numpy(y_test).type(torch.LongTensor) # data type is long"],"execution_count":5,"outputs":[{"output_type":"stream","text":["torch.Size([33600, 784])\n","torch.Size([33600])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":264},"id":"nDG5A8--_RPc","executionInfo":{"status":"ok","timestamp":1625663081766,"user_tz":-420,"elapsed":391,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"dbeb29fa-0cd4-4c79-ab1c-ef93a2b06587"},"source":["# Visualize 1 ảnh trong dataset.\n","plt.imshow(featuresxtrain[100].reshape(28,28))\n","plt.axis(\"off\")\n","plt.title(ytrain[100])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"rr7mDauLAIMN"},"source":["**3.tạo model CNN**"]},{"cell_type":"code","metadata":{"id":"pfiAlsu5_RRw","executionInfo":{"status":"ok","timestamp":1625793978525,"user_tz":-420,"elapsed":374,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}}},"source":["# Create CNN Model\n","class CNNModel(nn.Module):\n","    def __init__(self):#Đây là nơi chúng tôi xác định các lớp trong mạng của mình.\n","        super(CNNModel, self).__init__()# Initialize the nn module \n","        #Ta sử dụng 2 convolutional layer.\n","        #torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros')\n","        #torch.nn.Linear(in_features, out_features, bias=True)\n","\n","        # Convolution 1\n","        self.cnn1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5, stride=1, padding=0)\n","        self.relu1 = nn.ReLU()        # Số feature map là out_channels = 16, kernel size là 5 * 5\n","        self.maxpool1 = nn.MaxPool2d(kernel_size=2)# Max pool 1 : Pooling size là 2 * 2\n","\n","        # Convolution 2\n","        self.cnn2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=0)\n","        self.relu2 = nn.ReLU()\n","        self.maxpool2 = nn.MaxPool2d(kernel_size=2)# Max pool 2 :Pooling size là 2 * 2\n","\n","        # Fully connected 1\n","        self.fc1 = nn.Linear(32 * 4 * 4, 10) \n","    #Ta kết hợp convolutional và logistic regression để tạo ra CNN model.\n","    def forward(self, x):#Đây là nơi bạn thực hiện kết nối các lớp với nhau và làm cho mọi thứ hoạt động.\n","        # Convolution 1\n","        out = self.cnn1(x)\n","        out = self.relu1(out)\n","        # Max pool 1\n","        out = self.maxpool1(out)\n","        # Convolution 2 \n","        out = self.cnn2(out)\n","        out = self.relu2(out)\n","        # Max pool 2 \n","        out = self.maxpool2(out)\n","        out = out.view(out.size(0), -1)\n","        # Linear function (readout)\n","        out = self.fc1(out)\n","        return out\n","\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"JwUv43SN_RUI","executionInfo":{"status":"ok","timestamp":1625793981614,"user_tz":-420,"elapsed":4,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}}},"source":["# batch_size, epoch and iteration\n","batch_size = 100 #Batch size chính là kích thước của mỗi nhóm :ie 100 images per batch \n","n_iters = 2501\n","num_epochs = n_iters / (len(featuresxtrain) / batch_size)#33600/100 =336 => 2500/336 =..\n","num_epochs = int(num_epochs)\n","# Pytorch train và test sets\n","train = torch.utils.data.TensorDataset(featuresxtrain,ytrain)\n","test = torch.utils.data.TensorDataset(featuresxtest,ytest)\n","# data loader\n","train_loader = torch.utils.data.DataLoader(train, batch_size = batch_size, shuffle = False) # không tráo\n","test_loader = torch.utils.data.DataLoader(test, batch_size = batch_size, shuffle = False)\n","#tải một hoặc nhiều quá trình, tùy chỉnh thứ tự tải và tự động chia lô (đối chiếu) và ghim bộ nhớ tùy chọn\n","\n","model = CNNModel()# 7,Create CNN\n","error = nn.CrossEntropyLoss()#8, Cross Entropy Loss \n","learning_rate = 0.1# 9,SGD Optimizer\n","optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fI53p_TUBY2U"},"source":["**CNN model training**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U7ElxbrC_RWs","executionInfo":{"status":"ok","timestamp":1625794859742,"user_tz":-420,"elapsed":139376,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"a40bf1b1-262a-449d-bf90-890eff429bf6"},"source":["# CNN model training\n","count = 0\n","loss_list = []\n","iteration_list = []\n","accuracy_list = []\n","for epoch in range(num_epochs):\n","      # lặp lại trên toàn bộ tập dữ liệu đã cung cấp cho bạn batch_size các mẫu tại một thời điểm.\n","    for i, (images, labels) in enumerate(train_loader):# liệt kê; trainloader : nhiều batch\n","        train = Variable(images.view(100,1,28,28)) #Input Features = 1 x 28 x 28\n","        ## Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28\n","        labels = Variable(labels)\n","        optimizer.zero_grad()#Xóa gradient\n","        # lan truyền chuyển tiếp forwward\n","        outputs = model(train)#y_pred = model(X_trainTensor):\n","        loss = error(outputs, labels)# Tính toán softmax và tổn thất entropy chéo\n","        loss.backward()#  tính gradients\n","        optimizer.step() #cập nhật tham số\n","        count += 1\n","        if count % 50 == 0:\n","            # tính Accuracy           \n","            correct = 0;total = 0\n","            #  Lặp lại thông qua tập dữ liệu test\n","            for images, labels in test_loader:\n","                test = Variable(images.view(100,1,28,28))\n","                outputs = model(test.float())\n","                # nhận dự đoán từ giá trị lớn nhất\n","                predicted = torch.max(outputs.data, 1)[1]\n","                total += len(labels) # tổng số nhãn\n","                correct += (predicted == labels).sum()# tổng số dự đoán đúng\n","            accuracy = 100 * correct / float(total)\n","            # lưu trữ loss và lặp lại\n","            loss_list.append(loss.data)\n","            iteration_list.append(count)\n","            accuracy_list.append(accuracy)\n","            if count % 500 == 0:\n","                print('Iteration: {}  Loss: {}  Accuracy: {} %'.format(count, loss.data, accuracy))# Print Loss"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Iteration: 500  Loss: 0.024099059402942657  Accuracy: 98.41666412353516 %\n","Iteration: 1000  Loss: 0.023011106997728348  Accuracy: 98.6547622680664 %\n","Iteration: 1500  Loss: 0.004726750776171684  Accuracy: 98.47618865966797 %\n","Iteration: 2000  Loss: 0.008485046215355396  Accuracy: 98.6547622680664 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gPVeHXX1_RY3","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1624674060617,"user_tz":-420,"elapsed":681,"user":{"displayName":"huy huy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhlPE5h72piKemfes55Vz5b6eZWRLng8IawB8DpUQ=s64","userId":"16032138417676383682"}},"outputId":"afe06f87-118a-4daa-bb60-58d1fbea6a5e"},"source":["# visualization loss \n","plt.plot(iteration_list,loss_list)\n","plt.xlabel(\"Number of iteration\")\n","plt.ylabel(\"Loss\")\n","plt.title(\"CNN: Loss vs Number of iteration\")\n","plt.show()\n","\n","# visualization accuracy \n","plt.plot(iteration_list,accuracy_list,color = \"red\")\n","plt.xlabel(\"Number of iteration\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"CNN: Accuracy vs Number of iteration\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EioPWHT9_RbI"},"source":["from torchsummary import summary "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jfDNy3lTHSyy"},"source":["# Chúng ta có thể sử dụng thư viện torchsummary ở đây để tìm\n","# nếu chúng ta đã làm sai điều gì đó\n","\n","# Nhưng trước tiên chúng ta cần cho PyTorch biết nơi 'giữ' mô hình\n","# Trên GPU hoặc trên CPU\n","thiết bị = # ---- ĐIỀN VÀO ----\n","print ('Mô hình sẽ chạy trên', thiết bị)\n","\n","# Khởi tạo mô hình\n","mnist1 = # ---- ĐIỀN VÀO ----\n","tóm tắt (# ---- ĐIỀN VÀO ----) # Tóm tắt "]},{"cell_type":"code","metadata":{"id":"77ErtQ6z_Rdi"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yosGZcvf_Rf4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-akGKP_G_Rip"},"source":[""],"execution_count":null,"outputs":[]}]}